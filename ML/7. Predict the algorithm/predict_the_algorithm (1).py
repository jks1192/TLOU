# -*- coding: utf-8 -*-
"""predict the algorithm.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lmgcQjtaPp5cYU1aZBYoEsgTQHRnh-TN
"""

'''
# Sample code to perform I/O:

name = input()                  # Reading input from STDIN
print('Hi, %s.' % name)         # Writing output to STDOUT

# Warning: Printing unwanted or ill-formatted data to output will cause the test cases to fail
'''

# Write your code here
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split as tts
from sklearn.ensemble import RandomForestClassifier as rfc
from sklearn.preprocessing import LabelEncoder as le
# from sklearn.metrics import mean_squared_error as mse
from sklearn.metrics import classification_report as cr
from sklearn.metrics import confusion_matrix as cm
train=pd.read_csv("train.csv")
test=pd.read_csv("test.csv")
# print(train.columns)
# train.drop(labels='ID', axis=1, inplace=True)
le2=le()
train['ID']=le2.fit_transform(train['ID'])
print('Missing Values(train): ',train.isna().sum().sum())
print('Missing Values(test): ',test.isna().sum().sum())
test.fillna(value=0,inplace=True)
y=train['Result']
X=train.drop(labels='Result',axis=1)
X_train,x_test,y_train,y_test = tts(X,y,test_size=0.25)
# X_train,x_test,y_train,y_test = tts(X,y,test_size=0.01)
clf=rfc(n_estimators=100, max_depth=5, random_state=11)
clf=clf.fit(X_train, y_train)
# pred=clf.predict(x_test)
# print('Classification Report:',cr(y_test, pred))
# print('Confusion Metrics:\n',cm(y_test, pred))
teid=test['ID']
# test.drop(labels='ID', axis=1, inplace=True)
le1=le()
test['ID']=le1.fit_transform(test['ID'])
predtest=clf.predict(test)
submission=pd.DataFrame(teid,columns=['ID'])
submission["Result"]=predtest
submission.to_csv('submission.csv',index=False)
submission